generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

model Message {
  messageId   Int      @default(autoincrement())
  groupId     Int
//sender      User     @relation(fields: [userId, senderName], references: [id, username])
  sender      User     @relation(fields: [userId], references: [id])
  timestamp   DateTime @default(now()) @db.Timestamptz(6)
  message     String
  group       Group    @relation(fields: [groupId], references: [id])
  userId      String
//senderName  String

  @@id([messageId, groupId])
}

model Group {
  id       Int       @id @default(autoincrement())
  name     String    
  iconUrl  String?   @db.VarChar(2048)
  members  User[]
  messages Message[]
}

// model User {
//   id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   username  String    @unique(map: "users_username_unique") @db.VarChar(24)
//   pwHash    String    @db.Char(60)
//   avatarUrl String?   @db.VarChar(2048)
//   online    Boolean   @default(true)
//   groups    Group[]
//   messages  Message[]

//   @@unique([id, username])
// }

model User {
  id            String    @id @default(cuid())
  name          String    @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  groups        Group[]//
  messages      Message[]//
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
